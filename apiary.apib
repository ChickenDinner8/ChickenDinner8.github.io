FORMAT: 1A
HOST: https://bobwu.cn/api/

# ChickenDinner8

Eat点点扫码点餐系统

## 商家账户信息管理 [/boss/user]
商家账号有关的一些操作

### 注册新用户 [POST]

+ Request (application/json)

        {
            "username": "username",
            "password": "password"
        }
+ Response 200 (application/json)
注册成功

    + Body
    
        {
            "msg": "注册成功"
        }
+ Response 409 (application/json)
注册失败，可能是用户名已存在

    + Body
    
        {
            "msg": "注册失败"
        }


### 获取用户信息 [GET]
获取当前登陆用户的个人信息，若未登陆则会提示

+ Response 200 (application/json)
获取成功

    + Body
    
        {
            "username":"username"
        }

+ Response 401 (application/json)
未登录

    + Body
    
        {
            "msg": "未登录"
        }

### 修改用户信息 [PUT]
更新传入的用户属性（不能修改密码)，返回某一用户的全部属性
+ Request (application/json)
    
    {
        "username": "username",
        "password": "password"
    }

+ Response 200 (application/json)

    {
        "username": "username"
    }


## 商家账户登陆态管理 [/boss/session]

所有商家端操作都要以登录成功为前提，否则操作会失败且返回未登录信息

### 登录 [POST]
新建一个登录态
+ Request (application/json)

        {
            "username": "username",
            "password": "password"
        }

+ Response 200 (application/json)

    + Body
    
        {
            "msg": "登陆成功"
        }

+ Response 401 (application/json)

    + Body
    
        {
            "msg": "账号或者密码错误"
        }
    
        {
            "msg": "当前用户不存在"
        }


### 登出 [DELETE]
结束登录态

+ Response 200 (application/json)
    
    + Body
        
        {
            "msg": "登出成功"
        }

## 所有餐厅 [/restaurants]

### 查看旗下所有餐厅的信息 [GET]

+ Response 200 (application/json)

    + Body
        
        {
            "restaurants":[
                {
                    "id":"id",
                    "name":"name",
                    "location":"location",
                    "description":"xxxx"
                },
                {
                    "id":"id",
                    "name":"name",
                    "location":"location",
                    "description":"xxxx"
                }
            ]
        }


## 某一餐厅 [/restaurant/:{restaurantId}]

### 查看某一餐厅的信息 [GET]

+ Response 200 (application/json)

    + Body
    
        {
            "id":"id",
            "name":"name",
            "location":"location",
            "description":"xxxx"
        }

### 创建一个餐厅 [POST]

+ Request (application/json)
    
    + Body
        
        {
            "name": "kfc",
            "description": "fastfood",
            "location":"location"
        }

+ Response 201 (application/json)
创建成功
    
    + Body
        
        {
            "id":"id",
            "name":"name",
            "location":"location",
            "description":"xxxx"
        }

### 修改餐厅信息 [PUT]

+ Request (application/json)

        {
            "name": "kfc",
            "description": "fastfood"
        }

+ Response 200 (application/json)
修改成功，返回餐厅的所有属性
    + Body

        {
            "id":"id",
            "name": "kfc",
            "description": "fastfood"
        }

## 餐厅菜单 [/menu/:{restaurantId}]

### 查看菜单 [GET]

+ Response 200 (application/json)

    + Body
    
        {
            foods:[
                {},
                {},
                {}
            ]
        }

## 菜单上的菜品 [/menu?restaurantId=?&foodId=?]

### 获取某一菜品的信息 [GET]
某一餐厅的某一菜品的信息

+ Response 200 (application/json)
返回一个food 对象

    + Body
    
        {
            "food_id": "888",
            "food_name": "chicken",
            "description": "nice, nice",
            "price": "888",
            "sales": "50"
        }

### 添加菜品 [POST]
为某一餐厅添加新菜品（无需指定foodId）
+ Request (application/json)
发送一个food 对象

    + Body
        
        {
            "food_name": "chicken",
            "description": "nice, nice",
            "price": "888"
        }


+ Response 200 (application/json)
创建成功，返回完整的food对象

    + Body
        
        {
            "food_id": "888",
            "food_name": "chicken",
            "description": "nice, nice",
            "price": "888",
            "sales": "0"
        }


### 编辑菜品 [PUT]
编辑某一餐厅的某一菜品

+ Request (application/json)
发送一个完整的food对象

    + Body
    
        {
            "food_name": "chicken",
            "description": "nice, nice",
            "price": "888"
        }

+ Response 200 (application/json)
修改成功，返回修改后的food对象，包括id

    + Body
    
        {
            "food_id": "888",
            "food_name": "chicken",
            "description": "nice, nice",
            "price": "888",
            "sales": "0"
        }


### 删除菜品 [DELETE]

+ Response 200 (application/json)
删除成功
    
    + Body
        
        {
            "msg":"删除成功"
        }


## 订单 [/restaurant/orders?restaurantId=?&tableId=?]

### 查看订单 [GET]
查看某一桌子的全部订单，若不指定tableId，则为当前餐厅的全部订单

+ Response 200 (application/json)

        [
            {},
            {},
            {}
        ]

### 提交订单 [POST]
需完整提供restaurantId和tableId，提交一个订单，返回订单提交成功后的订单详情

+ Request (application/json)

        {
            foods: [
                {
                    "food_id": "111",
                    "num": "1"
                },
                {
                    "food_id":"222",
                    "num":"2"
                }
            ],
            table_id: "111",
            customer_id: "111"
        }

+ Response 201 (text/html)

    + Body

        {
            order_id: "666",
            foods: [
                {
                    "food_id": "111",
                    "num": "1"
                },
                {
                    "food_id":"222",
                    "num":"2"
                }
            ],
            table_id: "111",
            customer_id: "111",
            order_time: "2018-01-01 11:11:11"
        }
            
## 评论 [/restaurant/comment?restaurantId=?]
这部分处理对某一餐厅的评论，在之后需要加入资源的分页等
### 查看评论 [GET]

+ Response 200 (application/json)

        [
            {
                "comment_id": "111",
                "comment_content": "shit"
            },
        ]

### 撰写评论 [POST]

+ Request (application/json)

        {
            "user_id": "666",
            "comment_content": "shit"
        }

+ Response 201 (application/json)

    + Body

        {
            "comment_id": "111",
            "comment_content": "shit"
        }


## 库存 [/restaurant/stock?restaurantId=?]

### 获取库存 [GET]

+ Response 200 (application/json)

        [
            {
                "foodName": "chicken",
                "howMany" : "666"
            }
        ]
        
        

## 小程序端登陆 [/buyer/session]

### 新建登录态 [POST]
发送通过wx接口获取的login code和user info，session key将会保存在cookie中

+ Request (application/json)

    + Body
        
        {
            "code":"code",
            "nickname":"nickname",
            "avatorUrl": "avator_url"
        }
        
+ Response 200 (application/json)

    + Body
    
        {
            "msg":"登陆成功"
        }